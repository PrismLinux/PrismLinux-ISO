#!/bin/bash
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Updates the mirror lists for Arch and Chaotic-AUR using rate-mirrors.
# by CrystalNetwork Studio

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}->${NC} $1"
}

print_success() {
    echo -e "${GREEN}✅${NC} $1"
}

print_error() {
    echo -e "${RED}❌${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠️${NC} $1"
}

# Function to check internet connectivity
check_internet() {
    local test_urls=(
        "1.1.1.1"
        "8.8.8.8"
        "archlinux.org"
        "google.com"
    )
    
    print_status "Checking internet connectivity..."
    
    for url in "${test_urls[@]}"; do
        if ping -c 1 -W 5 "$url" >/dev/null 2>&1; then
            print_success "Internet connection established (via $url)"
            return 0
        fi
    done
    
    # Additional check using curl if ping fails
    if command -v curl >/dev/null 2>&1; then
        for url in "https://archlinux.org" "https://www.google.com"; do
            if curl -s --connect-timeout 10 --max-time 15 "$url" >/dev/null 2>&1; then
                print_success "Internet connection established (via curl to $url)"
                return 0
            fi
        done
    fi
    
    # Additional check using wget if curl fails
    if command -v wget >/dev/null 2>&1; then
        for url in "https://archlinux.org" "https://www.google.com"; do
            if wget -q --spider --timeout=10 "$url" 2>/dev/null; then
                print_success "Internet connection established (via wget to $url)"
                return 0
            fi
        done
    fi
    
    return 1
}

# Function to wait for internet connection
wait_for_internet() {
    local max_attempts=12
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if check_internet; then
            return 0
        fi
        
        print_warning "Attempt $attempt/$max_attempts: No internet connection detected"
        
        if [ $attempt -lt $max_attempts ]; then
            print_status "Waiting 5 seconds before retry..."
            sleep 5
        fi
        
        ((attempt++))
    done
    
    return 1
}

# Function to check if rate-mirrors is available
check_rate_mirrors() {
    if ! command -v rate-mirrors >/dev/null 2>&1; then
        print_error "rate-mirrors is not installed or not in PATH"
        print_status "Please install rate-mirrors: pacman -S rate-mirrors"
        exit 1
    fi
}

# Function to detect privilege escalation tool
detect_privilege_tool() {
    if command -v doas >/dev/null 2>&1; then
        echo "doas"
    elif command -v sudo >/dev/null 2>&1; then
        echo "sudo"
    else
        print_error "Neither sudo nor doas found. Please install one of them."
        exit 1
    fi
}

# Function to show usage information
show_usage() {
    echo -e "\n${BLUE}Usage:${NC} $0 [OPTIONS]"
    echo -e "\n${BLUE}Options:${NC}"
    echo -e "  --no-bak    Skip backup of existing mirror lists"
    echo -e "  -h, --help  Show this help message"
    echo ""
}

# Function to backup existing mirror lists
backup_mirrors() {
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local priv_tool=$(detect_privilege_tool)
    
    if [ -f "/etc/pacman.d/mirrorlist" ]; then
        print_status "Backing up existing Arch mirrorlist..."
        if [ "$EUID" -eq 0 ]; then
            cp /etc/pacman.d/mirrorlist "/etc/pacman.d/mirrorlist.backup.$timestamp"
        else
            $priv_tool cp /etc/pacman.d/mirrorlist "/etc/pacman.d/mirrorlist.backup.$timestamp"
        fi
        print_success "Arch mirrorlist backed up to mirrorlist.backup.$timestamp"
    fi
    
    if [ -f "/etc/pacman.d/chaotic-mirrorlist" ]; then
        print_status "Backing up existing Chaotic-AUR mirrorlist..."
        if [ "$EUID" -eq 0 ]; then
            cp /etc/pacman.d/chaotic-mirrorlist "/etc/pacman.d/chaotic-mirrorlist.backup.$timestamp"
        else
            $priv_tool cp /etc/pacman.d/chaotic-mirrorlist "/etc/pacman.d/chaotic-mirrorlist.backup.$timestamp"
        fi
        print_success "Chaotic-AUR mirrorlist backed up to chaotic-mirrorlist.backup.$timestamp"
    fi
}

# Function to update Arch mirrors
update_arch_mirrors() {
    local priv_tool=$(detect_privilege_tool)
    print_status "Updating mirror list for Arch Linux repositories..."
    
    # If running as root, don't use privilege escalation tool
    if [ "$EUID" -eq 0 ]; then
        if rate-mirrors --allow-root --protocol https arch --fetch-mirrors-timeout=300000 2>/dev/null | grep -v '^#' | tee /etc/pacman.d/mirrorlist >/dev/null; then
            local mirror_count=$(grep -c '^Server' /etc/pacman.d/mirrorlist 2>/dev/null || echo "0")
            print_success "Arch Linux mirrorlist updated successfully ($mirror_count mirrors)"
        else
            print_error "Failed to update Arch Linux mirrorlist"
            return 1
        fi
    else
        if $priv_tool rate-mirrors --allow-root --protocol https arch --fetch-mirrors-timeout=300000 2>/dev/null | grep -v '^#' | $priv_tool tee /etc/pacman.d/mirrorlist >/dev/null; then
            local mirror_count=$(grep -c '^Server' /etc/pacman.d/mirrorlist 2>/dev/null || echo "0")
            print_success "Arch Linux mirrorlist updated successfully ($mirror_count mirrors)"
        else
            print_error "Failed to update Arch Linux mirrorlist"
            return 1
        fi
    fi
}

# Function to update Chaotic-AUR mirrors
update_chaotic_mirrors() {
    local priv_tool=$(detect_privilege_tool)
    print_status "Updating mirror list for Chaotic-AUR..."
    
    # If running as root, don't use privilege escalation tool
    if [ "$EUID" -eq 0 ]; then
        if rate-mirrors --allow-root --protocol https chaotic-aur --fetch-mirrors-timeout=300000 2>/dev/null | grep -v '^#' | tee /etc/pacman.d/chaotic-mirrorlist >/dev/null; then
            local mirror_count=$(grep -c '^Server' /etc/pacman.d/chaotic-mirrorlist 2>/dev/null || echo "0")
            print_success "Chaotic-AUR mirrorlist updated successfully ($mirror_count mirrors)"
        else
            print_error "Failed to update Chaotic-AUR mirrorlist"
            return 1
        fi
    else
        if $priv_tool rate-mirrors --allow-root --protocol https chaotic-aur --fetch-mirrors-timeout=300000 2>/dev/null | grep -v '^#' | $priv_tool tee /etc/pacman.d/chaotic-mirrorlist >/dev/null; then
            local mirror_count=$(grep -c '^Server' /etc/pacman.d/chaotic-mirrorlist 2>/dev/null || echo "0")
            print_success "Chaotic-AUR mirrorlist updated successfully ($mirror_count mirrors)"
        else
            print_error "Failed to update Chaotic-AUR mirrorlist"
            return 1
        fi
    fi
}

# Function to test sudo access
test_sudo_access() {
    local priv_tool=$(detect_privilege_tool)
    
    # Skip if running as root
    if [ "$EUID" -eq 0 ]; then
        return 0
    fi
    
    print_status "Testing $priv_tool access..."
    
    # Test with a simple command instead of -v flag
    if $priv_tool true >/dev/null 2>&1; then
        print_success "$priv_tool access confirmed"
    else
        print_error "Failed to authenticate with $priv_tool"
        print_error "Please check your credentials and try again"
        exit 1
    fi
}

# Main execution
main() {
    local skip_backup=0
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --no-bak)
                skip_backup=1
                shift
                ;;
            -h|--help)
                show_usage
                exit 0
                ;;
            *)
                print_error "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done
    
    echo -e "\n${BLUE}=== Mirror List Updater ===${NC}\n"
    
    # Check if running as root (not recommended, but handle gracefully)
    if [ "$EUID" -eq 0 ]; then
        print_warning "Running as root. Consider running as regular user with sudo access."
    fi
    
    # Check for rate-mirrors
    check_rate_mirrors
    
    # Test sudo/doas access early
    test_sudo_access
    
    # Check internet connectivity
    if ! wait_for_internet; then
        print_error "No internet connection available after multiple attempts"
        print_error "Please check your network connection and try again"
        exit 1
    fi
    
    # Backup existing mirror lists (unless --no-bak is specified)
    if [ $skip_backup -eq 0 ]; then
        backup_mirrors
    else
        print_warning "Skipping backup as requested (--no-bak)"
    fi
    
    # Update mirror lists
    local arch_success=0
    local chaotic_success=0
    
    if update_arch_mirrors; then
        arch_success=1
    fi
    
    echo ""
    
    if update_chaotic_mirrors; then
        chaotic_success=1
    fi
    
    echo ""
    
    # Final status
    if [ $arch_success -eq 1 ] && [ $chaotic_success -eq 1 ]; then
        print_success "All mirror lists updated successfully!"
        print_status "You may want to run '$(detect_privilege_tool) pacman -Syy' to refresh package databases"
    elif [ $arch_success -eq 1 ] || [ $chaotic_success -eq 1 ]; then
        print_warning "Some mirror lists updated successfully, but not all"
        exit 1
    else
        print_error "Failed to update mirror lists"
        exit 1
    fi
}

# Run main function
main "$@"
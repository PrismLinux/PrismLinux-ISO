# === Shell and Environment Setup ===
#
# Set a default shell to ensure consistent behavior across different environments.
# Per GNU Coding Standards, this avoids issues with inherited SHELL variables.
SHELL = /bin/sh

# === Project Layout and Core Variables ===
#
# Define project structure using variables for clarity and easy modification.
# PROJECT_ROOT is determined dynamically.
PROJECT_ROOT   := $(dir $(abspath $(lastword $(MAKEFILE_LIST))))
PROFILE        ?= desktop
BUILD_DIR      := $(PROJECT_ROOT)/build
PROFILES_DIR   := $(PROJECT_ROOT)/profiles

# --- Profile-Specific Variables ---
#
# These variables are derived from the selected PROFILE.
PROFILE_SRC_DIR := $(PROFILES_DIR)/$(PROFILE)
PROFILE_BUILD_DIR := $(BUILD_DIR)/$(PROFILE)
WORK_DIR        := $(PROFILE_BUILD_DIR)/work
OUTPUT_DIR      := $(PROFILE_BUILD_DIR)/out
TMP_DIR         := $(WORK_DIR)/tmp

# --- Build Artifacts and Tools ---
#
# Variables for build outputs and system commands. Using standard variable
# names like 'MKARCHISO' allows for easy overriding from the command line.
BUILD_DATE     := $(shell date +%Y.%m.%d)
ISO_NAME       := PrismLinux-$(PROFILE)-$(BUILD_DATE)-x86_64.iso
ISO_PATH       := $(OUTPUT_DIR)/$(ISO_NAME)
LOG_FILE       := $(OUTPUT_DIR)/mkarchiso.log
# Location of the final package list generated by mkarchiso.
FINAL_PACKAGES_FILE := $(WORK_DIR)/iso/prismlinux/pkglist.x86_64.txt
PRIV_CMD       := $(shell command -v doas 2>/dev/null || command -v sudo 2>/dev/null)
MKARCHISO      := mkarchiso
FORMAT_SCRIPT  := $(PROJECT_ROOT)/scripts/format.sh

# --- Dynamic Profile Discovery ---
#
# Use wildcard to automatically find all available profiles. This avoids
# manual updates and makes the build system more robust.
PROFILES       := $(notdir $(patsubst %/,%,$(dir $(wildcard $(PROFILES_DIR)/*/packages.x86_64))))

# ==============================================================================
#
# Phony Targets
#
# .PHONY declares targets that are not actual files. This prevents conflicts
# with files of the same name and improves performance by telling make not to
# check for a corresponding file.
#
# ==============================================================================

.PHONY: all build clean distclean iso help debug format
.PHONY: $(PROFILES) # Create a phony target for each profile

# ==============================================================================
#
# Standard Targets (as per GNU Coding Standards)
#
# These targets provide a standardized interface for building and managing the
# project.
#
# ==============================================================================

# --- Default Target ---
# The 'all' target is the default and simply displays the help message.
all: help

# --- Build All Profiles ---
# This target builds all discovered profiles. It avoids recursive 'make' calls
# by iterating over a list of profile-specific targets. This structure is
# better for dependency tracking and parallel execution (`make -j`).
build: $(PROFILES)

# --- Individual Profile Builds ---
# A pattern rule to build the ISO for any discovered profile.
$(PROFILES):
	@$(MAKE) iso PROFILE=$@

# --- Main ISO Build Target ---
# This target orchestrates the entire ISO creation process for a single profile.
# It has dependencies to ensure directories are created and the profile is
# prepared before the build starts.
iso: $(OUTPUT_DIR) | $(PROFILE_SRC_DIR)/packages.x86_64
	@echo "==> Building ISO for profile: $(PROFILE)"
	@cd $(WORK_DIR)/$(PROFILE) && \
		$(PRIV_CMD) env TMPDIR=$(TMP_DIR) $(MKARCHISO) -v -w $(WORK_DIR) -o $(OUTPUT_DIR) . > $(LOG_FILE) 2>&1
	@echo "==> Post-processing ISO for profile: $(PROFILE)"
	@# This entire block is run with elevated privileges to avoid permission errors
	@# after mkarchiso creates the output directory as root.
	@$(PRIV_CMD) sh -c ' \
		set -e; \
		ORIGINAL_ISO=$$(find "$(OUTPUT_DIR)" -name "*.iso" -type f -newer "$(LOG_FILE)" | head -n 1); \
		if [ -n "$$ORIGINAL_ISO" ]; then \
			echo "--> Renaming ISO: $$(basename $$ORIGINAL_ISO) -> $(ISO_NAME)"; \
			mv "$$ORIGINAL_ISO" "$(ISO_PATH)"; \
		fi; \
		echo "--> Generating checksum for $(ISO_NAME)"; \
		(cd "$(OUTPUT_DIR)" && sha256sum "$(ISO_NAME)") > "$(ISO_PATH).sha256"; \
		echo "--> Copying final package list from build directory"; \
		cp "$(FINAL_PACKAGES_FILE)" "$(OUTPUT_DIR)/packages.x86_64"; \
		if [ -n "$${SUDO_USER}" ]; then \
			echo "--> Setting ownership for $${SUDO_USER}"; \
			chown -R "$${SUDO_USER}:$$(id -g -n $$SUDO_USER)" "$(OUTPUT_DIR)"; \
		fi \
	'
	@echo "==> Build complete: $(ISO_PATH)"

# --- Cleanup Targets ---
# 'clean' removes build artifacts for all profiles.
# 'distclean' is a more thorough cleanup, as per GNU standards.
clean:
	@echo "==> Cleaning all build artifacts."
	@$(PRIV_CMD) rm -rf $(BUILD_DIR)

distclean: clean

# ==============================================================================
#
# Helper and Utility Targets
#
# ==============================================================================

# --- Directory and File Preparation ---
#
# An order-only prerequisite to ensure the profile directory exists.
$(PROFILE_SRC_DIR)/packages.x86_64:
	@if [ ! -d "$(PROFILE_SRC_DIR)" ]; then \
		echo "Error: Profile directory '$(PROFILE_SRC_DIR)' not found."; \
		echo "Available profiles: $(PROFILES)"; \
		exit 1; \
	fi

# Create output directories and copy profile files.
$(OUTPUT_DIR):
	@mkdir -p $(OUTPUT_DIR) $(TMP_DIR)
	@rm -rf $(WORK_DIR)/$(PROFILE) && cp -r $(PROFILE_SRC_DIR) $(WORK_DIR)/$(PROFILE)
	@touch $(LOG_FILE)

# --- Package List Formatting ---
format:
	@echo "==> Formatting package lists for all profiles."
	@for profile in $(PROFILES); do \
		$(SHELL) $(FORMAT_SCRIPT) $(PROFILES_DIR)/$$profile/packages.x86_64; \
	done

# --- Debugging Target ---
debug:
	@echo "=== Debug Information ==="
	@echo "  Profile:           $(PROFILE)"
	@echo "  Profile Source:    $(PROFILE_SRC_DIR)"
	@echo "  Build Directory:   $(PROFILE_BUILD_DIR)"
	@echo "  Output Directory:  $(OUTPUT_DIR)"
	@echo "  ISO Name:          $(ISO_NAME)"
	@echo "  Final Packages:    $(FINAL_PACKAGES_FILE)"
	@echo "  Detected Profiles: $(PROFILES)"
	@echo "  Sudo Command:      $(PRIV_CMD)"
	@echo "========================="

# --- Help Target ---
help:
	@echo "PrismLinux ISO Build System"
	@echo ""
	@echo "Usage: make [target] [PROFILE=<profile>]"
	@echo ""
	@echo "Available Profiles:"
	@for profile in $(PROFILES); do \
		echo "  - $$profile"; \
	done
	@echo ""
	@echo "Standard Targets:"
	@echo "  all              Builds no profiles, shows this help message (default)."
	@echo "  build            Build ISOs for all available profiles."
	@echo "  iso              Build the ISO for the specified PROFILE (default: desktop)."
	@echo "  clean            Remove all build artifacts."
	@echo "  distclean        Alias for 'clean'."
	@echo ""
	@echo "Utility Targets:"
	@echo "  format           Format 'packages.x86_64' for all profiles."
	@echo "  debug            Show configuration and environment variables."
	@echo "  help             Display this help message."

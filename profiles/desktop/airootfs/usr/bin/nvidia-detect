#!/usr/bin/env bash

# NVIDIA Driver Detection and Loading Script for PrismLinux
# Automatically detects NVIDIA hardware and loads appropriate drivers
# Supports proprietary drivers, open-source drivers, and Nouveau

set -euo pipefail

readonly SCRIPT_NAME="nvidia-detect"
readonly NVIDIA_BASE_DIR="/opt/nvidia"
readonly LOG_PREFIX="[$SCRIPT_NAME]"

# Driver configurations
declare -A DRIVER_CONFIGS=(
    ["open"]="nvidia-open nvidia-utils"
    ["legacy-470"]="nvidia-470xx-dkms nvidia-470xx-utils"
    ["legacy-390"]="nvidia-390xx-dkms nvidia-390xx-utils"
    ["legacy-340"]="nvidia-340xx-dkms nvidia-340xx-utils"
    ["nouveau"]="xf86-video-nouveau"
)

declare -A DRIVER_MODULES=(
    ["open"]="nvidia nvidia_modeset nvidia_drm nvidia_uvm"
    ["legacy-470"]="nvidia nvidia_modeset nvidia_drm nvidia_uvm"
    ["legacy-390"]="nvidia nvidia_modeset nvidia_drm nvidia_uvm"
    ["legacy-340"]="nvidia"
    ["nouveau"]="nouveau"
)

# GPU detection patterns
declare -A GPU_PATTERNS=(
    ["open"]="rtx (20|30|40|50)[0-9]{2}|gtx 16[0-9]{2}|rtx a[0-9]{4}"
    ["legacy-470"]="gtx 10[0-9]{2}|titan x|titan xp"
    ["legacy-390"]="gtx [6-9][0-9]{2}|gt [6-7][0-9]{2}|quadro [km][0-9]{4}|tesla [km][0-9]{2}"
    ["legacy-340"]="gtx [4-5][0-9]{2}|gt [4-5][0-9]{2}|geforce [89][0-9]{3}|quadro [f-j][x0-9]{3}"
)

# Logging functions
log() {
    echo "$LOG_PREFIX $*" >&2
}

log_error() {
    echo "$LOG_PREFIX ERROR: $*" >&2
}

log_warn() {
    echo "$LOG_PREFIX WARNING: $*" >&2
}

log_success() {
    echo "$LOG_PREFIX SUCCESS: $*" >&2
}

# Check if script should skip NVIDIA driver loading
should_skip_nvidia() {
    local cmdline
    cmdline=$(cat /proc/cmdline)

    if [[ $cmdline =~ nomodeset ]]; then
        log "nomodeset detected in kernel parameters - skipping NVIDIA driver loading"
        return 0
    fi

    if [[ $cmdline =~ (module_blacklist=nvidia|modprobe\.blacklist=nvidia) ]]; then
        log "NVIDIA modules blacklisted in kernel parameters - skipping NVIDIA driver loading"
        return 0
    fi

    return 1
}

# Detect NVIDIA GPU hardware
detect_nvidia_hardware() {
    local gpu_info pci_id

    gpu_info=$(lspci -nn | grep -iE "VGA.*NVIDIA|3D.*NVIDIA" || true)

    if [[ -z "$gpu_info" ]]; then
        return 1
    fi

    log "NVIDIA GPU detected: $(echo "$gpu_info" | head -1)"

    # Extract PCI ID for detailed logging
    pci_id=$(echo "$gpu_info" | grep -oE '\[10de:[0-9a-fA-F]{4}\]' | head -1 | sed 's/\[10de://' | sed 's/\]//' || true)
    if [[ -n "$pci_id" ]]; then
        log "GPU PCI ID: 10de:$pci_id"
    fi

    echo "$gpu_info"
}

# Determine appropriate driver for detected GPU
determine_driver_type() {
    local gpu_info="$1"
    local driver_type

    # Check each driver pattern
    for driver_type in open legacy-470 legacy-390 legacy-340; do
        if echo "$gpu_info" | grep -qiE "${GPU_PATTERNS[$driver_type]}"; then
            echo "$driver_type"
            return 0
        fi
    done

    # Default to open driver for unknown modern cards
    log_warn "Unknown NVIDIA GPU, defaulting to open driver"
    echo "open"
}

# Check if driver modules are currently loaded
is_driver_loaded() {
    local driver="$1"
    local modules="${DRIVER_MODULES[$driver]:-}"
    local module

    [[ -n "$modules" ]] || return 1

    # For nouveau, just check if the module is loaded
    if [[ "$driver" == "nouveau" ]]; then
        lsmod | grep -q "^nouveau"
        return $?
    fi

    # For NVIDIA drivers, check for core nvidia module
    lsmod | grep -q "^nvidia"
}

# Get currently loaded driver type
get_loaded_driver() {
    local driver

    for driver in "${!DRIVER_CONFIGS[@]}"; do
        if is_driver_loaded "$driver"; then
            echo "$driver"
            return 0
        fi
    done

    return 1
}

# Check if driver packages are available in the system
are_packages_available() {
    local driver="$1"
    local packages_dir="$NVIDIA_BASE_DIR/$driver"

    [[ -d "$packages_dir" ]] || return 1

    local package_files=("$packages_dir"/*.pkg.tar.zst)
    [[ -f "${package_files[0]}" ]] || return 1

    return 0
}

# Install driver packages (for LiveCD, this loads packages from /opt/nvidia/)
install_driver() {
    local driver="$1"
    local packages_dir="$NVIDIA_BASE_DIR/$driver"

    if ! are_packages_available "$driver"; then
        log_error "Driver packages not available for $driver in $packages_dir"
        return 1
    fi

    log "Loading $driver driver packages from LiveCD image ($packages_dir)..."

    # In LiveCD environment, we might need to extract/install packages temporarily
    if pacman -U --noconfirm --needed "$packages_dir"/*.pkg.tar.zst; then
        log_success "Loaded $driver driver packages"
        return 0
    else
        log_error "Failed to load $driver driver packages"
        return 1
    fi
}

# Load prerequisite modules
load_graphics_prerequisites() {
    local modules=("video" "drm" "drm_ttm_helper" "drm_kms_helper")
    local module

    for module in "${modules[@]}"; do
        modprobe "$module" 2>/dev/null || true
    done
}

# Load driver-specific kernel modules
load_driver_modules() {
    local driver="$1"
    local modules="${DRIVER_MODULES[$driver]:-}"
    local module success=true

    [[ -n "$modules" ]] || {
        log_error "No modules defined for driver: $driver"
        return 1
    }

    log "Loading kernel modules for $driver driver..."

    # Check if we have permission to load modules
    if ! modprobe --dry-run video &>/dev/null; then
        log_error "No permission to load kernel modules (not running as root?)"
        return 1
    fi

    # Load graphics prerequisites first (except for nouveau which handles this itself)
    if [[ "$driver" != "nouveau" ]]; then
        load_graphics_prerequisites
    fi

    # Load driver-specific modules
    for module in $modules; do
        if [[ "$module" == "nvidia_uvm" ]]; then
            # UVM module is optional
            if ! modprobe "$module" 2>/dev/null; then
                log_warn "$module module not available (optional)"
            fi
        else
            if ! modprobe "$module" 2>/dev/null; then
                log_error "Failed to load $module module"
                # For nouveau, check if it's blacklisted
                if [[ "$module" == "nouveau" ]]; then
                    if grep -r "blacklist.*nouveau" /etc/modprobe.d/ &>/dev/null; then
                        log_error "Nouveau is blacklisted in modprobe configuration"
                    fi
                    if lsmod | grep -q "nvidia"; then
                        log_error "NVIDIA proprietary driver is loaded, conflicts with Nouveau"
                    fi
                fi
                success=false
                break
            fi
        fi
    done

    if $success; then
        log_success "Loaded $driver driver modules"
        return 0
    else
        return 1
    fi
}

# Verify that the driver is working correctly
verify_driver_functionality() {
    local driver="$1"

    case "$driver" in
        "nouveau")
            # For Nouveau, check if the module is loaded
            if lsmod | grep -q nouveau; then
                log_success "Nouveau driver is loaded and active"
                return 0
            else
                log_warn "Nouveau module not found in loaded modules"
                return 1
            fi
            ;;
        "legacy-340")
            # Legacy 340 doesn't create device files immediately
            log "Legacy 340 driver loaded (limited verification available)"
            return 0
            ;;
        *)
            # For proprietary drivers, check device files
            if [[ -c /dev/nvidia0 ]] || [[ -c /dev/nvidiactl ]]; then
                log_success "NVIDIA device files detected - driver appears functional"
                return 0
            else
                log_warn "NVIDIA device files not found - driver may not be working correctly"
                return 1
            fi
            ;;
    esac
}

# Attempt to load an already loaded driver
try_existing_driver() {
    local current_driver

    # First check if any driver is already loaded
    if current_driver=$(get_loaded_driver); then
        log "Found already loaded $current_driver driver"
        verify_driver_functionality "$current_driver"
        log_success "$current_driver driver is active"
        return 0
    fi

    return 1
}

# Try to install and load a specific driver (only if we have NVIDIA hardware)
try_install_driver() {
    local driver="$1"
    local gpu_detected="$2"

    # Don't try to install NVIDIA drivers if no NVIDIA GPU detected
    if [[ "$gpu_detected" != "true" ]] && [[ "$driver" != "nouveau" ]]; then
        log "Skipping $driver driver - no NVIDIA hardware detected"
        return 1
    fi

    log "Attempting to install $driver driver..."

    if install_driver "$driver" && load_driver_modules "$driver"; then
        verify_driver_functionality "$driver"
        log_success "Successfully installed and loaded $driver driver"
        return 0
    else
        log_error "Failed to install or load $driver driver"
        return 1
    fi
}

# Try fallback drivers in order of preference (only if we have NVIDIA hardware)
try_fallback_drivers() {
    local preferred_driver="$1"
    local gpu_detected="$2"
    local fallback_order=("open" "legacy-470" "legacy-390" "legacy-340" "nouveau")
    local driver

    log "Trying fallback drivers..."

    for driver in "${fallback_order[@]}"; do
        # Skip the already-tried preferred driver
        [[ "$driver" != "$preferred_driver" ]] || continue

        # For NVIDIA drivers, only try if we have NVIDIA hardware
        if [[ "$gpu_detected" != "true" ]] && [[ "$driver" != "nouveau" ]]; then
            continue
        fi

        # Only try if packages are available
        if are_packages_available "$driver"; then
            log "Trying fallback driver: $driver"
            if try_install_driver "$driver" "$gpu_detected"; then
                return 0
            fi
        else
            log "Fallback driver $driver not available"
        fi
    done

    return 1
}

# Main driver detection and loading logic
main() {
    log "Starting NVIDIA driver detection and loading..."

    # Check if we should skip NVIDIA driver loading
    if should_skip_nvidia; then
        exit 0
    fi

    # Try to use an already loaded driver or kernel modules first
    if try_existing_driver; then
        exit 0
    fi

    # Detect NVIDIA hardware
    local gpu_info gpu_detected="false"
    if gpu_info=$(detect_nvidia_hardware); then
        gpu_detected="true"
        # Determine the appropriate driver
        local preferred_driver
        preferred_driver=$(determine_driver_type "$gpu_info")
        log "Hardware analysis suggests: $preferred_driver driver"

        # Try to install the preferred driver
        if try_install_driver "$preferred_driver" "$gpu_detected"; then
            exit 0
        fi

        # If preferred driver failed, try fallbacks
        if try_fallback_drivers "$preferred_driver" "$gpu_detected"; then
            exit 0
        fi

        log_error "All NVIDIA driver installation attempts failed"
        log "Consider:"
        log "  - Checking hardware compatibility"
        log "  - Using nomodeset kernel parameter"
        log "  - Manual driver installation"
    else
        log "No NVIDIA GPU detected. System will use native graphics drivers."

        # Check if we should try to load built-in kernel modules anyway
        if modinfo nvidia &>/dev/null; then
            log "NVIDIA modules available in kernel, you can try loading manually with:"
            log "  modprobe nvidia && modprobe nvidia_drm modeset=1"
        fi
    fi

    exit 0
}

# Trap to ensure clean exit
trap 'log "Script interrupted"' INT TERM

# Execute main function with all arguments
main "$@"
